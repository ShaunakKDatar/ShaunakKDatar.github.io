<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The SKD Blog</title>
    <link>/</link>
    <description>Recent content on The SKD Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Jun 2025 00:48:25 +0530</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bits to BSPs – GSoC Midterm Recap</title>
      <link>/posts/gsoc-midterm-deliverables/</link>
      <pubDate>Wed, 25 Jun 2025 00:48:25 +0530</pubDate>
      
      <guid>/posts/gsoc-midterm-deliverables/</guid>
      <description>&lt;p&gt;Hello readers!&lt;/p&gt;
&lt;p&gt;We’re about four weeks into GSoC 2025, and it&amp;rsquo;s been an incredible ride so far. I&amp;rsquo;m thrilled to be working with the RTEMS Project this summer. In this post, I want to walk you through what I’ve been working on, what’s already done, and what’s coming up before the midterm evaluations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-am-i-going-to-talk-about&#34;&gt;What am I going to talk about?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What project am I working on for GSoC 2025?&lt;/li&gt;
&lt;li&gt;What have I accomplished so far?&lt;/li&gt;
&lt;li&gt;What do I plan to complete before midterm evaluations?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-project&#34;&gt;The Project&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m contributing to the project:&lt;br&gt;
&lt;strong&gt;&lt;a href=&#34;https://summerofcode.withgoogle.com/programs/2025/projects/CUL4f3Nh&#34;&gt;Adding I2C, PWM, DMA and Mailbox Support to the Raspberry Pi 4B BSP in RTEMS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
      <content>&lt;p&gt;Hello readers!&lt;/p&gt;
&lt;p&gt;We’re about four weeks into GSoC 2025, and it&amp;rsquo;s been an incredible ride so far. I&amp;rsquo;m thrilled to be working with the RTEMS Project this summer. In this post, I want to walk you through what I’ve been working on, what’s already done, and what’s coming up before the midterm evaluations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-am-i-going-to-talk-about&#34;&gt;What am I going to talk about?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What project am I working on for GSoC 2025?&lt;/li&gt;
&lt;li&gt;What have I accomplished so far?&lt;/li&gt;
&lt;li&gt;What do I plan to complete before midterm evaluations?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-project&#34;&gt;The Project&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m contributing to the project:&lt;br&gt;
&lt;strong&gt;&lt;a href=&#34;https://summerofcode.withgoogle.com/programs/2025/projects/CUL4f3Nh&#34;&gt;Adding I2C, PWM, DMA and Mailbox Support to the Raspberry Pi 4B BSP in RTEMS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the title suggests, the goal is to implement and upstream support for the following peripherals in the Raspberry Pi 4B Board Support Package (BSP) for RTEMS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I2C&lt;/li&gt;
&lt;li&gt;PWM&lt;/li&gt;
&lt;li&gt;Mailbox&lt;/li&gt;
&lt;li&gt;DMA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-these-peripherals&#34;&gt;Why these peripherals?&lt;/h3&gt;
&lt;p&gt;There are two perspectives here:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One&lt;/strong&gt;, I2C and PWM are fundamental interfaces. Many BSPs already support them – for example, I2C in &lt;a href=&#34;https://gitlab.rtems.org/rtems/rtos/rtems/-/tree/main/bsps/arm/raspberrypi/i2c&#34;&gt;arm/raspberrypi&lt;/a&gt; and PWM in &lt;a href=&#34;https://gitlab.rtems.org/rtems/rtos/rtems/-/tree/main/bsps/arm/beagle/pwm&#34;&gt;arm/beagle&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;Two&lt;/strong&gt;, DMA and Mailbox are essential for enabling SDHCI support, which was a pending item from last year’s RTEMS efforts.&lt;/p&gt;
&lt;p&gt;A more personal reason: I2C and PWM are what powered the self-balancing feature of the &lt;a href=&#34;https://github.com/SRA-VJTI/Wall-E&#34;&gt;Wall-E robot from SRA&lt;/a&gt;. I first learned about them back in my first year at college, taught First Year students about this robot in my second year — and now, getting to implement them at RTEMS feels increadibly fulfilling.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;work-done-so-far&#34;&gt;Work Done So Far&lt;/h2&gt;
&lt;p&gt;These weeks have flown by! I&amp;rsquo;ve written and debugged a lot of code, fixed formatting issues, and had two merge requests accepted. It’s been a fast-paced journey, and I’m incredibly grateful to my mentors, Christian and Kinsey, for their guidance and quick feedback.&lt;/p&gt;
&lt;h3 id=&#34;whats-been-merged&#34;&gt;What’s been merged?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;✅ &lt;strong&gt;PWM Driver for Raspberry Pi 4B&lt;/strong&gt;:&lt;br&gt;
&lt;a href=&#34;https://gitlab.rtems.org/rtems/rtos/rtems/-/commit/d4755476bcc95c1a1864fa20c1fc7255f509074a&#34;&gt;Merged Commit&lt;/a&gt;&lt;br&gt;
The driver allows users to configure both PWM controllers (PWM0 and PWM1) and their respective channels. A detailed blog post on usage and design is on the way—stay tuned!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ &lt;strong&gt;Formatting fixes&lt;/strong&gt; for the BSP header:&lt;br&gt;
&lt;a href=&#34;https://gitlab.rtems.org/rtems/rtos/rtems/-/commit/1c9e91d25bdc7175a41b88c306d7ed03697dc66f#f6733755e37b7dc68c7ae64c1e9ec3e1b8a19511&#34;&gt;raspberrypi.h&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-contributions&#34;&gt;Other Contributions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Re-tested the I2C driver and handled an edge case involving 0-length transfers.&lt;/li&gt;
&lt;li&gt;Started digging into the DMA controller documentation to prep for the next phase.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;plan-before-midterm-evaluations&#34;&gt;Plan Before Midterm Evaluations&lt;/h2&gt;
&lt;p&gt;After syncing up with my mentors, here’s what we’ve decided as the midterm deliverables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I2C driver merged upstream&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; PWM driver merged upstream&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Significant progress on either DMA or Mailbox support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PWM work is done and upstream. I2C works well too — I’m just wrapping up some formatting and quality improvements. Meanwhile, I’ve started exploring the DMA peripheral and will be diving into implementation soon.&lt;/p&gt;
&lt;p&gt;With 2–3 weeks left until evaluations, I&amp;rsquo;m focused and hopeful. Let’s keep building and contributing to this wonderful ecosystem called &lt;strong&gt;open source&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That’s it for now — but there’s a lot more coming soon!&lt;br&gt;
If you’re into embedded systems, RTEMS, or just love geeking out over low-level stuff, I’d love to chat. Feel free to reach out anytime!&lt;/p&gt;
&lt;p&gt;Until next time — keep building, keep tinkering, and keep contributing.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;
Shaunak&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Running RTEMS on Raspberry Pi 4B</title>
      <link>/posts/running-rtems-on-raspberrypi4b/</link>
      <pubDate>Wed, 11 Jun 2025 21:42:22 +0530</pubDate>
      
      <guid>/posts/running-rtems-on-raspberrypi4b/</guid>
      <description>&lt;p&gt;&lt;strong&gt;RTEMS (Real-Time Executive for Multiprocessor Systems)&lt;/strong&gt; is a real-time operating system used in embedded systems, offering a rich set of Board Support Packages (BSPs) for various platforms. One such platform is the &lt;strong&gt;Raspberry Pi 4B&lt;/strong&gt;, a popular board among hobbyists, educators, and industry professionals. In this post, I’ll walk you through setting up RTEMS on the Raspberry Pi 4B from scratch.&lt;/p&gt;
&lt;p&gt;Let’s dive in!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-setting-up-the-environment&#34;&gt;🚀 Setting Up the Environment&lt;/h1&gt;
&lt;p&gt;First, create a working directory. Ensure that &lt;code&gt;git&lt;/code&gt; is installed on your host machine.&lt;/p&gt;</description>
      <content>&lt;p&gt;&lt;strong&gt;RTEMS (Real-Time Executive for Multiprocessor Systems)&lt;/strong&gt; is a real-time operating system used in embedded systems, offering a rich set of Board Support Packages (BSPs) for various platforms. One such platform is the &lt;strong&gt;Raspberry Pi 4B&lt;/strong&gt;, a popular board among hobbyists, educators, and industry professionals. In this post, I’ll walk you through setting up RTEMS on the Raspberry Pi 4B from scratch.&lt;/p&gt;
&lt;p&gt;Let’s dive in!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-setting-up-the-environment&#34;&gt;🚀 Setting Up the Environment&lt;/h1&gt;
&lt;p&gt;First, create a working directory. Ensure that &lt;code&gt;git&lt;/code&gt; is installed on your host machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p $HOME/quick-start/src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $HOME/quick-start/src
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Clone the necessary repositories:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://gitlab.rtems.org/rtems/tools/rtems-source-builder.git rsb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://gitlab.rtems.org/rtems/rtos/rtems.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;rtems&lt;/code&gt; repo contains the RTEMS source, while &lt;code&gt;rsb&lt;/code&gt; (RTEMS Source Builder) helps you build the toolchain and BSP.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-installing-the-toolchain&#34;&gt;🔧 Installing the Toolchain&lt;/h1&gt;
&lt;p&gt;Now, build and install the AArch64 toolchain for the Raspberry Pi 4B:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $HOME/quick-start/src/rsb/rtems
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;../source-builder/sb-set-builder --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/quick-start/rtems/7 7/rtems-aarch64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once completed, verify the toolchain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$HOME/quick-start/rtems/7/bin/aarch64-rtems7-gcc --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;-building-the-bsp&#34;&gt;🧱 Building the BSP&lt;/h1&gt;
&lt;p&gt;Let’s build the &lt;strong&gt;aarch64/raspberrypi4b&lt;/strong&gt; BSP.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $HOME/quick-start/src/rtems
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[aarch64/raspberrypi4b]&amp;#34;&lt;/span&gt; &amp;gt; config.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/quick-start/rtems/7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;-creating-the-rtems-application&#34;&gt;📝 Creating the RTEMS Application&lt;/h1&gt;
&lt;p&gt;Now that the BSP is ready, let’s write a basic RTEMS application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p $HOME/quick-start/src/app/hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $HOME/quick-start/src/app/hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Download Waf and make it executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl https://waf.io/waf-2.0.19 &amp;gt; waf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x waf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Initialize a Git repo and add RTEMS Waf support:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://gitlab.rtems.org/rtems/tools/rtems_waf.git rtems_waf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-wscript&#34;&gt;🛠 &lt;code&gt;wscript&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rtems_version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rtems_waf.rtems &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; rtems
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error: no rtems_waf git submodule&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(ctx):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rtems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init(ctx, version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rtems_version, long_commands &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bsp_configure&lt;/span&gt;(conf, arch_bsp):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rtems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;options(opt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;configure&lt;/span&gt;(conf):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rtems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure(conf, bsp_configure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bsp_configure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;(bld):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rtems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build(bld)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bld(features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c cprogram&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello.exe&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cflags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-g -O2&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello.c&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-helloc&#34;&gt;💬 &lt;code&gt;hello.c&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;rtems.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rtems_task &lt;span style=&#34;color:#a6e22e&#34;&gt;Init&lt;/span&gt;(rtems_task_argument ignored)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello World&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I am Shaunak Datar&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CONFIGURE_UNLIMITED_OBJECTS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CONFIGURE_UNIFIED_WORK_AREAS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CONFIGURE_RTEMS_INIT_TASKS_TABLE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CONFIGURE_INIT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;rtems/confdefs.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configure and build the app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf configure --rtems&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/quick-start/rtems/7 --rtems-bsp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aarch64/raspberrypi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./waf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the bootable kernel image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/quick-start/rtems/7/bin/aarch64-rtems7-objcopy -Obinary build/aarch64-rtems7-raspberrypi4b/hello.exe build/kernel8.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy &lt;code&gt;kernel8.img&lt;/code&gt; to your SD card. In the SD card’s &lt;code&gt;config.txt&lt;/code&gt;, add:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arm_64bit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dtoverlay&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;disable-bt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;-connecting-to-the-raspberry-pi&#34;&gt;📟 Connecting to the Raspberry Pi&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Wiring (via USB-to-UART):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pi Pin 8 (TX) → USB RX&lt;/li&gt;
&lt;li&gt;Pi Pin 10 (RX) → USB TX&lt;/li&gt;
&lt;li&gt;Pi GND → USB GND&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find your USB device:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls /dev/cu.*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use &lt;code&gt;minicom&lt;/code&gt; or any serial terminal at &lt;strong&gt;115200 baud&lt;/strong&gt;, &lt;strong&gt;8N1&lt;/strong&gt; settings.&lt;/p&gt;
&lt;p&gt;You should see something like this:
&lt;img src=&#34;./images/hello-world-rtems-rpi.png&#34; alt=&#34;RTEMS Hello World on Raspberry Pi&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That’s it! You’ve now got RTEMS running on your Raspberry Pi 4B.&lt;/p&gt;
&lt;p&gt;Want to know more about my work on this? Check out my &lt;a href=&#34;https://summerofcode.withgoogle.com/programs/2025/projects/CUL4f3Nh&#34;&gt;GSoC 2025 RTEMS project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking! 🤓&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Showcase</title>
      <link>/showcase/</link>
      <pubDate>Wed, 11 Jun 2025 21:41:57 +0530</pubDate>
      
      <guid>/showcase/</guid>
      <description>&lt;p&gt;👋🏽 Hey there — I’m Shaunak, an electronics engineer in the making at VJTI Mumbai.&lt;/p&gt;
&lt;p&gt;This blog is a logbook of sorts — a place where I share what I’m building, breaking, and learning. From writing my own operating system for the Raspberry Pi to tinkering with dev boards and embedded peripherals, this space documents it all: drivers, weird bugs, logic analyzer captures, and side quests in Rust or LLVM.&lt;/p&gt;</description>
      <content>&lt;p&gt;👋🏽 Hey there — I’m Shaunak, an electronics engineer in the making at VJTI Mumbai.&lt;/p&gt;
&lt;p&gt;This blog is a logbook of sorts — a place where I share what I’m building, breaking, and learning. From writing my own operating system for the Raspberry Pi to tinkering with dev boards and embedded peripherals, this space documents it all: drivers, weird bugs, logic analyzer captures, and side quests in Rust or LLVM.&lt;/p&gt;
&lt;p&gt;Most posts here are minimal, focused, and straight from the hardware trenches.&lt;/p&gt;
&lt;p&gt;If you like bootloaders, bare-metal systems programming, or just want to see what it takes to get an LED blinking &lt;em&gt;without&lt;/em&gt; an OS — you’re in the right place.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;➡️ Check out the latest posts below or dive into the &lt;a href=&#34;./about/&#34;&gt;About&lt;/a&gt; section to know more.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
